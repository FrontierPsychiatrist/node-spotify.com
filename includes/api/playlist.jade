div.page-header
    h2
        a#playlist Playlist
    pre.prettyprint
        | {
        |     name: 'Rock music',
        |     link: 'spotify:user:1234567890:playlist:6nruasfjdkMMLOas',
        |     collaborative: false
        | }

    h4 string name
    p The name of the playlist. This property is settable.

    h4 bool collaborative
    p Flag if the playlist is collaborative. This property is settable.

    h4 string link
    p The spotify link to the playlist.

    h4 int numTracks
    p The number of tracks in this playlist.

    h4 <a href="#track">track</a> getTrack(int index)
    p Returns the track at the given index. The track is an extended track, meaning it has the properties <code>creator, message, seen, createTime</code>.

    h4
        a#getTracks track[] getTracks()
    p Returns all <a href="#track">tracks</a> for the playlist. Use it with care if <code>numTracks</code> is large. Also returns extended tracks.

    h4 void addTracks(<a href="#track">track[]</a> tracks, int position)
    p Add the array of tracks after the given position.
    pre.prettyprint
        | var tracks = otherPlaylist.getTracks();
        | playlist.addTracks(tracks, 2);

    h4 void removeTracks(int[] indices)
    p Remove the tracks at the given indices.
    pre.prettyprint
        | var indices = [0, 4, 5];
        | playlist.removeTracks(indices);

    h4 void reorderTracks(int[] indices, int newPosition)
    p Reorder tracks. The tracks with the indices will get moved to newPosition. newPosition indicates the new index <i>before</i> anything is actually moved.
    pre.prettyprint
        | var indices = [0,1];
        | playlist.reorderTracks(indices, 3);

    h5 Events
    p You can register to the following events on a playlist via the <code>on</code> method (unregister via <code>off</code>).
        h6 <code>playlistRenamed: function(err, playlist)</code>
        pre.prettyprint
            | var playlistRenamed: function(err, playlist) {
            |     console.log('New name', playlist.name);
            | };
        h6 <code>tracksAdded: function(err, playlist, track[], position)</code>
        pre.prettyprint
            | var tracksAdded = function(err, playlist, track[], position) {
            |     console.log('Tracks ', track, ' added at position ', position);
            | };
        p Called when tracks are added to the playlist. The tracks are extended tracks, meaning they have the properties <code>creator, message, seen, createTime</code>.
            | Be sure to check the track objects are loaded with <code>track.isLoaded</code>.
            | <code>track.creator</code> will usually not be loaded at that point, use the <code>trackCreatedChanged</code> callback for that.
        h6 <code>tracksMoved: function(err, playlist, trackIndices[], newPosition)</code>
        pre.prettyprint
            | var tracksMoved = function(err, playlist, trackIndices[], newPosition) {
            |    console.log(trackIndices);
            |    console.log(newPosition);
            | };
        p Called when tracks are moved around in the playlist. Called once for every continuous region of indices with the new position of these tracks.
        h6 <code>tracksRemoved: function(err, playlist, trackIndices[])</code>
        pre.prettyprint
            | var tracksRemoved = function(err, playlist, trackIndices[]) {
            |     console.log('Tracks removed: ', trackIndices);
            | };
        p Called when tracks are removed from the playlist. Just gets the indices of the removed tracks.
        h6 <code>trackCreatedChanged: function(err, playlist, position, user, date)</code>
        pre.prettyprint
            | var trackCreatedChanged = function(err, playlist, position, user, date) {
            |     console.log('Track at position ', position, ' created by ', user, ' at ', date);
            | };
        p Called when data related to the creation of a track is changed. Typically interesting in collaborative playlists. <a href='#user'>user</a>
            | is a proper user object.
        h6 <code>trackSeenChanged: function(err, playlist, position, seen)</code>
        pre.prettyprint
            | var trackSeenChanged = function(err, playlist, position, seen) {
            |     console.log('Seen state for track at ', position, ' has changed to: ', seen);
            | };
        p Called when the track seen property has changed. This is used in inbox playlists and currently of no great use in node-spotify.
        h6 <code>trackMessageChanged: function(err, playlist, position, message)</code>
        pre.prettyprint
            | var trackMessageChanged: function(err, playlist, position, message)
            |     console.log('Message for track at ', position, ' is ', message)
            | };
        p Called when the track message property has changed. This is used in inbox playlists and currently of no great use in node-spotify.

    h3 Playlist folder
    p
        | There are special kinds of playlists for folders. A folder consists of a start and an end element. You can recognize them from the <code>type</code> property, the possible
        | values are available in <code>spotify.constants</code>.
    p About folders:
        ul
            li Folders cannot be renamed
            li To delete a folder delete <b>both</b> the start and end element! Be careful, when you deleted the start element the index of the end element will have changed!
            li To put a playlist into a folder move it between the start and end element.
